<?php
// $Id$:

/**
 * @file
 * Defines a field type for displaying markup on the node/edit form.
 */

/**
 * Implementation of hook_field_info().
 */
function markup_field_info() {
  return array(
    'markup' => array(
      'label' => 'Markup',
      'description' => t("Provides field to output markup on the entitys edit form"),
      'default_widget' => 'markup',
      'default_formatter' => 'markup_default',
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function markup_field_formatter_info() {
  return array(
    'markup_default' => array(
      'label' => t('Output raw markup'),
      'field types' => array('markup'),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_view().
 */
function markup_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item){
    $element[$delta]['#markup'] = $item['markup'];
  }
  return $element;
}

/**
 * Implementation of hook_field_settings_form().
 */
function markup_field_settings_form($field, $instance, $has_data) {
  $form = array();
  $settings = $field['settings'];
  $form['markup'] = array(
    '#type' => 'textarea',
    '#title' => t('Markup'),
    '#default_value' => isset($settings['markup']) ? $settings['markup'] : '',
    '#required' => TRUE,
    '#rows' => 15,
    '#description' => t('The markup to be displayed. Any HTML is legal here, so be careful not to break your page layout.'),
  );
  $form['instructions'] = array(
    '#markup' => htmlentities(t('This is a special field. It will output the markup below, unfiltered by the system, on the node/edit form for this content type. Consider wrapping any visible output in <div class="form-item"></div> to follow form standards.')),
    '#weight' => -1,
  );
  return $form;
} 

/**
 * Implementation of hook_field_widget_info().
 */
function markup_field_widget_info() {
  return array(
    'markup' => array(
      'label' => 'Markup',
      'field types' => array('markup'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implementation of hook_field_widget_form().
 */
function markup_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    'markup' => array(
      '#markup' => $field['settings']['markup'],
    ),
  );
  return $element;
}

/**
 * Implementation of hook_field_is_empty().
 */
function markup_field_is_empty($item, $field) {
  return empty($item['markup']);
}

// Remove 'number of values' selection
function markup_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_field_edit_form'){
    if ($form['#field']['module'] == 'markup'){
      unset($form['field']['cardinality']);  
    }
  }
}

